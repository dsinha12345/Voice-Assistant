{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-3I9a1",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_message",
            "id": "OpenRouterComponent-0v9xU",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__Prompt-3I9a1{œdataTypeœ:œPromptœ,œidœ:œPrompt-3I9a1œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenRouterComponent-0v9xU{œfieldNameœ:œsystem_messageœ,œidœ:œOpenRouterComponent-0v9xUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-3I9a1",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-3I9a1œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenRouterComponent-0v9xU",
        "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œOpenRouterComponent-0v9xUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenRouterComponent",
            "id": "OpenRouterComponent-0v9xU",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-xvqTj",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__OpenRouterComponent-0v9xU{œdataTypeœ:œOpenRouterComponentœ,œidœ:œOpenRouterComponent-0v9xUœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-xvqTj{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xvqTjœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OpenRouterComponent-0v9xU",
        "sourceHandle": "{œdataTypeœ:œOpenRouterComponentœ,œidœ:œOpenRouterComponent-0v9xUœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-xvqTj",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xvqTjœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-6ANsL",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenRouterComponent-0v9xU",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-6ANsL{œdataTypeœ:œChatInputœ,œidœ:œChatInput-6ANsLœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-OpenRouterComponent-0v9xU{œfieldNameœ:œinput_valueœ,œidœ:œOpenRouterComponent-0v9xUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-6ANsL",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-6ANsLœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenRouterComponent-0v9xU",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenRouterComponent-0v9xUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-6ANsL",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "we are closed today"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 234,
        "id": "ChatInput-6ANsL",
        "measured": {
          "height": 234,
          "width": 320
        },
        "position": {
          "x": 678.8131827132115,
          "y": 763.8781168878379
        },
        "positionAbsolute": {
          "x": 689.5720422421635,
          "y": 765.155834131403
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-3I9a1",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "current_date"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template"
            ],
            "frozen": true,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "hidden": null,
                "method": "build_prompt",
                "name": "prompt",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": null,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "current_date": {
                "advanced": false,
                "display_name": "current_date",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "current_date",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "load_from_db": false,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "You are an expert AI assistant for the Scott Law Firm. Your primary task is to generate complete, accurate, and professional voicemail scripts when a user provides the name of a holiday or a specific event. You must adhere to the following rules without exception:\n\n1. Strict Formatting\n\nThe output must follow this exact format:\n\nEnglish: [script in English]\n\nSpanish: [script in Spanish]\n\n2. Date Calculation Logic\n\nAll dates must be calculated using the year from the {current_date} variable. You will be provided with a variable called {current_date} that represents today’s date. Use this date where applicable. Your method for determining closure and reopening dates depends on the type of event:\n\nA. Major Public Holidays\n\nFor the following major holidays, determine the exact date(s) of the holiday closure in 2025. Calculate the next business day when the office reopens. The office always reopens at 8:30 a.m. (8:30 de la mañana).\n\nNew Year's Day: January 1\n\nMemorial Day: May 26\n\nIndependence Day: July 4\n\nLabor Day: September 1\n\nChristmas Day: December 25\n\nB. Single-Day Events\n\n(e.g., Training, Team Building, Volunteering, Christmas Party)\n\nIf the user says the office \"is closed today,\" assume the closure date is {current_date}.\n\nIf the user says the office \"will be closed tomorrow,\" assume the message will be played on that future date. In this case, the closure date is {current_date} + 1 day, and the voicemail must say the office \"is closed today\" on that day.\n\nCalculate the next business day after the closure date to determine the reopening date. The office always reopens at 8:30 a.m. (8:30 de la mañana).\n\nThe voicemail message must always describe the office as \"closed today\"—because callers will hear the message on the actual closure date.\n\nC. Inclement Weather (Special Case)\n\nState that the office is closed due to inclement weather.\n\nDo not include a specific reopening date. Instead, say the office will reopen \"as soon as conditions are safe.\"\n\n3. Content and Tone\n\nClearly and professionally state the specific reason for the closure.\n\nThe return time is always 8:30 a.m. (or 8:30 de la mañana).\n\nThe English script must be grammatically correct and use a natural, professional tone.\n\nThe Spanish translation must be natural-sounding, professional, and grammatically correct.\n\nPre-Generated Holiday Scripts for 2025:\nNew Year's Day\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office is closed for New Year's Day on Wednesday, January 1st. We will reopen on Thursday, January 2nd, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Thank you!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina está cerrada por el Día de Año Nuevo el miércoles, 1 de enero. Abriremos el jueves, 2 de enero, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le devolveremos la llamada cuando regresemos. ¡Gracias!\"\n\nMartin Luther King Jr. Day\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office is closed in observance of Martin Luther King Jr. Day on Monday, January 20th. We will reopen on Tuesday, January 21st, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Thank you!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina está cerrada en observancia del Día de Martin Luther King Jr. el lunes, 20 de enero. Abriremos el martes, 21 de enero, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le devolveremos la llamada a nuestro regreso. ¡Gracias!\"\n\nPresidents' Day\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office is closed for Presidents' Day on Monday, February 17th. We will reopen on Tuesday, February 18th, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Thank you!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina está cerrada por el Día de los Presidentes el lunes, 17 de febrero. Abriremos el martes, 18 de febrero, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le devolveremos la llamada a nuestro regreso. ¡Gracias!\"\n\nGood Friday\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office is closed for Good Friday on Friday, April 18th. We will reopen on Monday, April 21st, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Thank you!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina está cerrada por el Viernes Santo el viernes, 18 de abril. Abriremos el lunes, 21 de abril, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le devolveremos la llamada a nuestro regreso. ¡Gracias!\"\n\nMemorial Day\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office is closed in observance of Memorial Day on Monday, May 26th. We will reopen on Tuesday, May 27th, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Thank you!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina está cerrada en observancia del Día de los Caídos el lunes, 26 de mayo. Abriremos el martes, 27 de mayo, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le devolveremos la llamada a nuestro regreso. ¡Gracias!\"\n\nJuneteenth\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office is closed in observance of Juneteenth on Thursday, June 19th. We will reopen on Friday, June 20th, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Thank you!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina está cerrada en observancia de Juneteenth el jueves, 19 de junio. Abriremos el viernes, 20 de junio, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le devolveremos la llamada a nuestro regreso. ¡Gracias!\"\n\nIndependence Day\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office is closed for Independence Day on Friday, July 4th. We will reopen on Monday, July 7th, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Thank you!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina está cerrada por el Día de la Independencia el viernes, 4 de julio. Abriremos el lunes, 7 de julio, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le devolveremos la llamada a nuestro regreso. ¡Gracias!\"\n\nLabor Day\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office is closed for Labor Day on Monday, September 1st. We will reopen on Tuesday, September 2nd, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Thank you!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina está cerrada por el Día del Trabajo el lunes, 1 de septiembre. Abriremos el martes, 2 de septiembre, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le devolveremos la llamada a nuestro regreso. ¡Gracias!\"\n\nThanksgiving\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office will be closed for the Thanksgiving holiday on Thursday, November 27th, and Friday, November 28th. We will reopen on Monday, December 1st, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Thank you!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina estará cerrada por el feriado de Acción de Gracias el jueves, 27 de noviembre y el viernes, 28 de noviembre. Abriremos el lunes, 1 de diciembre, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le regresaremos la llamada cuando estemos de regreso en la oficina. ¡Gracias!\"\n\nChristmas Day\n\nEnglish: \"Thank you for calling Scott Law Firm. Our office is closed for the Christmas holiday on Thursday, December 25th. We will reopen on Friday, December 26th, at 8:30 a.m. Please leave us a voice message, and we will return your phone call upon our return. Merry Christmas!\"\n\nSpanish: \"Gracias por llamar a Scott Law Firm. Nuestra oficina está cerrada por el feriado de Navidad el jueves, 25 de diciembre. Abriremos el viernes, 26 de diciembre, a las 8:30 de la mañana. Por favor déjenos un mensaje de voz y le devolveremos la llamada a nuestro regreso. ¡Feliz Navidad!\""
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 260,
        "id": "Prompt-3I9a1",
        "measured": {
          "height": 260,
          "width": 320
        },
        "position": {
          "x": 702.3455157922843,
          "y": 1050.7825714542612
        },
        "positionAbsolute": {
          "x": 690.2015147036818,
          "y": 1018.5443911764344
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "ChatOutput-xvqTj",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 234,
        "id": "ChatOutput-xvqTj",
        "measured": {
          "height": 234,
          "width": 320
        },
        "position": {
          "x": 1460.070372772908,
          "y": 872.7273956769025
        },
        "positionAbsolute": {
          "x": 1444.936881624563,
          "y": 872.7273956769025
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "OpenRouterComponent-0v9xU",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "OpenRouter provides unified access to multiple AI models from different providers through a single API.",
            "display_name": "OpenRouter",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "api_key",
              "site_url",
              "app_name",
              "provider",
              "model_name",
              "temperature",
              "max_tokens"
            ],
            "frozen": false,
            "icon": "OpenRouter",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": null,
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "hidden": null,
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": [
                  "api_key",
                  "model_name"
                ],
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenRouter API Key",
                "dynamic": false,
                "info": "Your OpenRouter API key",
                "input_types": [
                  "Message"
                ],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "app_name": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "App Name",
                "dynamic": false,
                "info": "Your app name for OpenRouter rankings",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "app_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections import defaultdict\nfrom typing import Any\n\nimport httpx\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import (\n    DropdownInput,\n    IntInput,\n    SecretStrInput,\n    SliderInput,\n    StrInput,\n)\n\n\nclass OpenRouterComponent(LCModelComponent):\n    \"\"\"OpenRouter API component for language models.\"\"\"\n\n    display_name = \"OpenRouter\"\n    description = (\n        \"OpenRouter provides unified access to multiple AI models from different providers through a single API.\"\n    )\n    icon = \"OpenRouter\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        SecretStrInput(\n            name=\"api_key\", display_name=\"OpenRouter API Key\", required=True, info=\"Your OpenRouter API key\"\n        ),\n        StrInput(\n            name=\"site_url\",\n            display_name=\"Site URL\",\n            info=\"Your site URL for OpenRouter rankings\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"app_name\",\n            display_name=\"App Name\",\n            info=\"Your app name for OpenRouter rankings\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"provider\",\n            display_name=\"Provider\",\n            info=\"The AI model provider\",\n            options=[\"Loading providers...\"],\n            value=\"Loading providers...\",\n            real_time_refresh=True,\n            required=True,\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"The model to use for chat completion\",\n            options=[\"Select a provider first\"],\n            value=\"Select a provider first\",\n            real_time_refresh=True,\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.7,\n            range_spec=RangeSpec(min=0, max=2, step=0.01),\n            info=\"Controls randomness. Lower values are more deterministic, higher values are more creative.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            info=\"Maximum number of tokens to generate\",\n            advanced=True,\n        ),\n    ]\n\n    def fetch_models(self) -> dict[str, list]:\n        \"\"\"Fetch available models from OpenRouter API and organize them by provider.\"\"\"\n        url = \"https://openrouter.ai/api/v1/models\"\n\n        try:\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n\n                models_data = response.json().get(\"data\", [])\n                provider_models = defaultdict(list)\n\n                for model in models_data:\n                    model_id = model.get(\"id\", \"\")\n                    if \"/\" in model_id:\n                        provider = model_id.split(\"/\")[0].title()\n                        provider_models[provider].append(\n                            {\n                                \"id\": model_id,\n                                \"name\": model.get(\"name\", \"\"),\n                                \"description\": model.get(\"description\", \"\"),\n                                \"context_length\": model.get(\"context_length\", 0),\n                            }\n                        )\n\n                return dict(provider_models)\n\n        except httpx.HTTPError as e:\n            self.log(f\"Error fetching models: {e!s}\")\n            return {\"Error\": [{\"id\": \"error\", \"name\": f\"Error fetching models: {e!s}\"}]}\n\n    def build_model(self) -> LanguageModel:\n        \"\"\"Build and return the OpenRouter language model.\"\"\"\n        model_not_selected = \"Please select a model\"\n        api_key_required = \"API key is required\"\n\n        if not self.model_name or self.model_name == \"Select a provider first\":\n            raise ValueError(model_not_selected)\n\n        if not self.api_key:\n            raise ValueError(api_key_required)\n\n        api_key = SecretStr(self.api_key).get_secret_value()\n\n        # Build base configuration\n        kwargs: dict[str, Any] = {\n            \"model\": self.model_name,\n            \"openai_api_key\": api_key,\n            \"openai_api_base\": \"https://openrouter.ai/api/v1\",\n            \"temperature\": self.temperature if self.temperature is not None else 0.7,\n        }\n\n        # Add optional parameters\n        if self.max_tokens:\n            kwargs[\"max_tokens\"] = self.max_tokens\n\n        headers = {}\n        if self.site_url:\n            headers[\"HTTP-Referer\"] = self.site_url\n        if self.app_name:\n            headers[\"X-Title\"] = self.app_name\n\n        if headers:\n            kwargs[\"default_headers\"] = headers\n\n        try:\n            return ChatOpenAI(**kwargs)\n        except (ValueError, httpx.HTTPError) as err:\n            error_msg = f\"Failed to build model: {err!s}\"\n            self.log(error_msg)\n            raise ValueError(error_msg) from err\n\n    def _get_exception_message(self, e: Exception) -> str | None:\n        \"\"\"Get a message from an OpenRouter exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str | None: The message from the exception, or None if no specific message can be extracted.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n\n            if isinstance(e, BadRequestError):\n                message = e.body.get(\"message\")\n                if message:\n                    return message\n        except ImportError:\n            pass\n        return None\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Update build configuration based on field updates.\"\"\"\n        try:\n            if field_name is None or field_name == \"provider\":\n                provider_models = self.fetch_models()\n                build_config[\"provider\"][\"options\"] = sorted(provider_models.keys())\n                if build_config[\"provider\"][\"value\"] not in provider_models:\n                    build_config[\"provider\"][\"value\"] = build_config[\"provider\"][\"options\"][0]\n\n            if field_name == \"provider\" and field_value in self.fetch_models():\n                provider_models = self.fetch_models()\n                models = provider_models[field_value]\n\n                build_config[\"model_name\"][\"options\"] = [model[\"id\"] for model in models]\n                if models:\n                    build_config[\"model_name\"][\"value\"] = models[0][\"id\"]\n\n                tooltips = {\n                    model[\"id\"]: (f\"{model['name']}\\nContext Length: {model['context_length']}\\n{model['description']}\")\n                    for model in models\n                }\n                build_config[\"model_name\"][\"tooltips\"] = tooltips\n\n        except httpx.HTTPError as e:\n            self.log(f\"Error updating build config: {e!s}\")\n            build_config[\"provider\"][\"options\"] = [\"Error loading providers\"]\n            build_config[\"provider\"][\"value\"] = \"Error loading providers\"\n            build_config[\"model_name\"][\"options\"] = [\"Error loading models\"]\n            build_config[\"model_name\"][\"value\"] = \"Error loading models\"\n\n        return build_config\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "Maximum number of tokens to generate",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "The model to use for chat completion",
                "name": "model_name",
                "options": [
                  "microsoft/phi-4-reasoning-plus",
                  "microsoft/mai-ds-r1:free",
                  "microsoft/phi-4-multimodal-instruct",
                  "microsoft/phi-4",
                  "microsoft/phi-3.5-mini-128k-instruct",
                  "microsoft/phi-3-mini-128k-instruct",
                  "microsoft/phi-3-medium-128k-instruct",
                  "microsoft/wizardlm-2-8x22b"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "tooltips": {
                  "microsoft/mai-ds-r1:free": "Microsoft: MAI DS R1 (free)\nContext Length: 163840\nMAI-DS-R1 is a post-trained variant of DeepSeek-R1 developed by the Microsoft AI team to improve the model’s responsiveness on previously blocked topics while enhancing its safety profile. Built on top of DeepSeek-R1’s reasoning foundation, it integrates 110k examples from the Tulu-3 SFT dataset and 350k internally curated multilingual safety-alignment samples. The model retains strong reasoning, coding, and problem-solving capabilities, while unblocking a wide range of prompts previously restricted in R1.\n\nMAI-DS-R1 demonstrates improved performance on harm mitigation benchmarks and maintains competitive results across general reasoning tasks. It surpasses R1-1776 in satisfaction metrics for blocked queries and reduces leakage in harmful content categories. The model is based on a transformer MoE architecture and is suitable for general-purpose use cases, excluding high-stakes domains such as legal, medical, or autonomous systems.",
                  "microsoft/phi-3-medium-128k-instruct": "Microsoft: Phi-3 Medium 128K Instruct\nContext Length: 128000\nPhi-3 128K Medium is a powerful 14-billion parameter model designed for advanced language understanding, reasoning, and instruction following. Optimized through supervised fine-tuning and preference adjustments, it excels in tasks involving common sense, mathematics, logical reasoning, and code processing.\n\nAt time of release, Phi-3 Medium demonstrated state-of-the-art performance among lightweight models. In the MMLU-Pro eval, the model even comes close to a Llama3 70B level of performance.\n\nFor 4k context length, try [Phi-3 Medium 4K](/models/microsoft/phi-3-medium-4k-instruct).",
                  "microsoft/phi-3-mini-128k-instruct": "Microsoft: Phi-3 Mini 128K Instruct\nContext Length: 128000\nPhi-3 Mini is a powerful 3.8B parameter model designed for advanced language understanding, reasoning, and instruction following. Optimized through supervised fine-tuning and preference adjustments, it excels in tasks involving common sense, mathematics, logical reasoning, and code processing.\n\nAt time of release, Phi-3 Medium demonstrated state-of-the-art performance among lightweight models. This model is static, trained on an offline dataset with an October 2023 cutoff date.",
                  "microsoft/phi-3.5-mini-128k-instruct": "Microsoft: Phi-3.5 Mini 128K Instruct\nContext Length: 128000\nPhi-3.5 models are lightweight, state-of-the-art open models. These models were trained with Phi-3 datasets that include both synthetic data and the filtered, publicly available websites data, with a focus on high quality and reasoning-dense properties. Phi-3.5 Mini uses 3.8B parameters, and is a dense decoder-only transformer model using the same tokenizer as [Phi-3 Mini](/models/microsoft/phi-3-mini-128k-instruct).\n\nThe models underwent a rigorous enhancement process, incorporating both supervised fine-tuning, proximal policy optimization, and direct preference optimization to ensure precise instruction adherence and robust safety measures. When assessed against benchmarks that test common sense, language understanding, math, code, long context and logical reasoning, Phi-3.5 models showcased robust and state-of-the-art performance among models with less than 13 billion parameters.",
                  "microsoft/phi-4": "Microsoft: Phi 4\nContext Length: 16384\n[Microsoft Research](/microsoft) Phi-4 is designed to perform well in complex reasoning tasks and can operate efficiently in situations with limited memory or where quick responses are needed. \n\nAt 14 billion parameters, it was trained on a mix of high-quality synthetic datasets, data from curated websites, and academic materials. It has undergone careful improvement to follow instructions accurately and maintain strong safety standards. It works best with English language inputs.\n\nFor more information, please see [Phi-4 Technical Report](https://arxiv.org/pdf/2412.08905)\n",
                  "microsoft/phi-4-multimodal-instruct": "Microsoft: Phi 4 Multimodal Instruct\nContext Length: 131072\nPhi-4 Multimodal Instruct is a versatile 5.6B parameter foundation model that combines advanced reasoning and instruction-following capabilities across both text and visual inputs, providing accurate text outputs. The unified architecture enables efficient, low-latency inference, suitable for edge and mobile deployments. Phi-4 Multimodal Instruct supports text inputs in multiple languages including Arabic, Chinese, English, French, German, Japanese, Spanish, and more, with visual input optimized primarily for English. It delivers impressive performance on multimodal tasks involving mathematical, scientific, and document reasoning, providing developers and enterprises a powerful yet compact model for sophisticated interactive applications. For more information, see the [Phi-4 Multimodal blog post](https://azure.microsoft.com/en-us/blog/empowering-innovation-the-next-generation-of-the-phi-family/).\n",
                  "microsoft/phi-4-reasoning-plus": "Microsoft: Phi 4 Reasoning Plus\nContext Length: 32768\nPhi-4-reasoning-plus is an enhanced 14B parameter model from Microsoft, fine-tuned from Phi-4 with additional reinforcement learning to boost accuracy on math, science, and code reasoning tasks. It uses the same dense decoder-only transformer architecture as Phi-4, but generates longer, more comprehensive outputs structured into a step-by-step reasoning trace and final answer.\n\nWhile it offers improved benchmark scores over Phi-4-reasoning across tasks like AIME, OmniMath, and HumanEvalPlus, its responses are typically ~50% longer, resulting in higher latency. Designed for English-only applications, it is well-suited for structured reasoning workflows where output quality takes priority over response speed.",
                  "microsoft/wizardlm-2-8x22b": "WizardLM-2 8x22B\nContext Length: 65536\nWizardLM-2 8x22B is Microsoft AI's most advanced Wizard model. It demonstrates highly competitive performance compared to leading proprietary models, and it consistently outperforms all existing state-of-the-art opensource models.\n\nIt is an instruct finetune of [Mixtral 8x22B](/models/mistralai/mixtral-8x22b).\n\nTo read more about the model release, [click here](https://wizardlm.github.io/WizardLM2/).\n\n#moe"
                },
                "trace_as_metadata": true,
                "type": "str",
                "value": "microsoft/mai-ds-r1:free"
              },
              "provider": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Provider",
                "dynamic": false,
                "info": "The AI model provider",
                "name": "provider",
                "options": [
                  "01-Ai",
                  "Aetherwiing",
                  "Agentica-Org",
                  "Ai21",
                  "Aion-Labs",
                  "Alfredpros",
                  "All-Hands",
                  "Alpindale",
                  "Amazon",
                  "Anthracite-Org",
                  "Anthropic",
                  "Arcee-Ai",
                  "Arliai",
                  "Baidu",
                  "Cognitivecomputations",
                  "Cohere",
                  "Deepseek",
                  "Eleutherai",
                  "Eva-Unit-01",
                  "Featherless",
                  "Google",
                  "Gryphe",
                  "Inception",
                  "Infermatic",
                  "Inflection",
                  "Liquid",
                  "Mancer",
                  "Meta-Llama",
                  "Microsoft",
                  "Minimax",
                  "Mistralai",
                  "Moonshotai",
                  "Morph",
                  "Neversleep",
                  "Nothingiisreal",
                  "Nousresearch",
                  "Nvidia",
                  "Openai",
                  "Opengvlab",
                  "Openrouter",
                  "Perplexity",
                  "Pygmalionai",
                  "Qwen",
                  "Raifle",
                  "Rekaai",
                  "Sao10K",
                  "Sarvamai",
                  "Scb10X",
                  "Shisa-Ai",
                  "Sophosympatheia",
                  "Thedrummer",
                  "Thudm",
                  "Tngtech",
                  "Undi95",
                  "X-Ai"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Microsoft"
              },
              "site_url": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Site URL",
                "dynamic": false,
                "info": "Your site URL for OpenRouter rankings",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "site_url",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "System message to pass to the model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "Controls randomness. Lower values are more deterministic, higher values are more creative.",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 2,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.99
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OpenRouterComponent"
        },
        "dragging": false,
        "id": "OpenRouterComponent-0v9xU",
        "measured": {
          "height": 641,
          "width": 320
        },
        "position": {
          "x": 1112.6530736180973,
          "y": 742.6984869810555
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CurrentDate-PNgnD",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "helpers",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Returns the current date and time in the selected timezone.",
            "display_name": "Current Date",
            "documentation": "",
            "edited": false,
            "field_order": [
              "timezone"
            ],
            "frozen": true,
            "icon": "clock",
            "key": "CurrentDate",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Current Date",
                "method": "get_current_date",
                "name": "current_date",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.10083472064057086,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from datetime import datetime\nfrom zoneinfo import ZoneInfo, available_timezones\n\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CurrentDateComponent(Component):\n    display_name = \"Current Date\"\n    description = \"Returns the current date and time in the selected timezone.\"\n    icon = \"clock\"\n    name = \"CurrentDate\"\n\n    inputs = [\n        DropdownInput(\n            name=\"timezone\",\n            display_name=\"Timezone\",\n            options=list(available_timezones()),\n            value=\"UTC\",\n            info=\"Select the timezone for the current date and time.\",\n            tool_mode=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Current Date\", name=\"current_date\", method=\"get_current_date\"),\n    ]\n\n    def get_current_date(self) -> Message:\n        try:\n            tz = ZoneInfo(self.timezone)\n            current_date = datetime.now(tz).strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n            result = f\"Current date and time in {self.timezone}: {current_date}\"\n            self.status = result\n            return Message(text=result)\n        except Exception as e:  # noqa: BLE001\n            logger.opt(exception=True).debug(\"Error getting current date\")\n            error_message = f\"Error: {e}\"\n            self.status = error_message\n            return Message(text=error_message)\n"
              },
              "timezone": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Timezone",
                "dynamic": false,
                "info": "Select the timezone for the current date and time.",
                "name": "timezone",
                "options": [
                  "Africa/Mogadishu",
                  "NZ",
                  "Asia/Bahrain",
                  "Asia/Dili",
                  "Etc/UCT",
                  "Africa/Brazzaville",
                  "America/Atka",
                  "America/Regina",
                  "America/Coyhaique",
                  "Singapore",
                  "Antarctica/Vostok",
                  "America/Porto_Velho",
                  "Asia/Rangoon",
                  "Pacific/Ponape",
                  "Europe/Gibraltar",
                  "America/Resolute",
                  "Europe/Warsaw",
                  "Africa/Ndjamena",
                  "Pacific/Auckland",
                  "Zulu",
                  "Africa/Ouagadougou",
                  "Europe/Podgorica",
                  "Etc/GMT-6",
                  "Africa/Monrovia",
                  "Europe/Chisinau",
                  "Asia/Kamchatka",
                  "America/Godthab",
                  "America/Aruba",
                  "Europe/Moscow",
                  "Africa/Nouakchott",
                  "Africa/Bamako",
                  "Australia/Currie",
                  "Asia/Thimbu",
                  "Australia/Sydney",
                  "Etc/GMT-0",
                  "America/Louisville",
                  "Europe/Volgograd",
                  "America/Havana",
                  "Asia/Tashkent",
                  "Europe/Stockholm",
                  "America/Phoenix",
                  "Asia/Qostanay",
                  "Pacific/Norfolk",
                  "Pacific/Midway",
                  "Pacific/Kiritimati",
                  "Indian/Kerguelen",
                  "Asia/Tel_Aviv",
                  "Asia/Phnom_Penh",
                  "Europe/Astrakhan",
                  "America/Asuncion",
                  "Europe/Belfast",
                  "Asia/Kashgar",
                  "Australia/NSW",
                  "Europe/Oslo",
                  "Europe/Uzhgorod",
                  "Africa/Kinshasa",
                  "Asia/Pyongyang",
                  "Etc/GMT-8",
                  "Canada/Mountain",
                  "America/Costa_Rica",
                  "Etc/GMT+11",
                  "America/Dominica",
                  "Europe/London",
                  "Etc/GMT-2",
                  "Australia/Hobart",
                  "Antarctica/Syowa",
                  "Europe/Copenhagen",
                  "Indian/Chagos",
                  "America/Mexico_City",
                  "Australia/Darwin",
                  "Africa/Harare",
                  "America/Jujuy",
                  "Pacific/Tarawa",
                  "Asia/Ho_Chi_Minh",
                  "Canada/Atlantic",
                  "America/St_Thomas",
                  "America/Nipigon",
                  "Asia/Chita",
                  "Australia/Broken_Hill",
                  "EET",
                  "Australia/Tasmania",
                  "America/Winnipeg",
                  "America/Dawson_Creek",
                  "Africa/Asmara",
                  "Europe/Vienna",
                  "America/Cayenne",
                  "Asia/Baku",
                  "Europe/Istanbul",
                  "Asia/Harbin",
                  "Africa/Addis_Ababa",
                  "America/Argentina/Salta",
                  "Pacific/Yap",
                  "America/Indiana/Marengo",
                  "Africa/Bangui",
                  "America/Indiana/Vevay",
                  "America/Iqaluit",
                  "Europe/Isle_of_Man",
                  "Pacific/Enderbury",
                  "Asia/Samarkand",
                  "GMT0",
                  "Canada/Yukon",
                  "Africa/Libreville",
                  "Etc/GMT-7",
                  "America/Argentina/San_Juan",
                  "America/Campo_Grande",
                  "Antarctica/Macquarie",
                  "Africa/Douala",
                  "Africa/Gaborone",
                  "Africa/Maputo",
                  "Asia/Bishkek",
                  "UCT",
                  "Asia/Brunei",
                  "MST7MDT",
                  "Europe/Kyiv",
                  "America/Mendoza",
                  "Europe/Zagreb",
                  "US/Central",
                  "Chile/EasterIsland",
                  "Asia/Makassar",
                  "US/Michigan",
                  "America/Blanc-Sablon",
                  "Australia/Adelaide",
                  "ROC",
                  "Asia/Damascus",
                  "Asia/Yakutsk",
                  "America/Eirunepe",
                  "Pacific/Fiji",
                  "America/Argentina/San_Luis",
                  "Antarctica/South_Pole",
                  "Pacific/Johnston",
                  "America/Nuuk",
                  "Brazil/Acre",
                  "US/Samoa",
                  "Antarctica/McMurdo",
                  "Indian/Mayotte",
                  "Europe/Zaporozhye",
                  "America/Ensenada",
                  "America/Goose_Bay",
                  "Australia/Yancowinna",
                  "America/Miquelon",
                  "Iceland",
                  "W-SU",
                  "America/Anguilla",
                  "Etc/GMT-3",
                  "Europe/Samara",
                  "America/Swift_Current",
                  "US/Eastern",
                  "Indian/Maldives",
                  "Asia/Chongqing",
                  "Etc/GMT+2",
                  "Pacific/Galapagos",
                  "Europe/Sofia",
                  "America/Rio_Branco",
                  "Europe/Tallinn",
                  "Africa/Kigali",
                  "Europe/Tirane",
                  "America/Martinique",
                  "America/Noronha",
                  "America/Indianapolis",
                  "Europe/Berlin",
                  "Turkey",
                  "GMT-0",
                  "Etc/GMT-4",
                  "US/Aleutian",
                  "Africa/Johannesburg",
                  "Pacific/Kanton",
                  "Europe/Monaco",
                  "Africa/Lagos",
                  "Pacific/Tahiti",
                  "Indian/Mauritius",
                  "Europe/Tiraspol",
                  "America/St_Lucia",
                  "Pacific/Easter",
                  "America/Sitka",
                  "Etc/UTC",
                  "Brazil/East",
                  "Etc/GMT+5",
                  "NZ-CHAT",
                  "America/Cuiaba",
                  "America/Virgin",
                  "America/Punta_Arenas",
                  "America/Guyana",
                  "EST",
                  "US/Mountain",
                  "Europe/Ulyanovsk",
                  "Australia/South",
                  "Asia/Amman",
                  "America/Indiana/Petersburg",
                  "Indian/Reunion",
                  "Africa/Malabo",
                  "Asia/Vientiane",
                  "America/Guayaquil",
                  "Atlantic/Azores",
                  "Europe/Kiev",
                  "America/Argentina/Mendoza",
                  "America/Indiana/Indianapolis",
                  "Africa/Ceuta",
                  "Mexico/BajaNorte",
                  "America/Sao_Paulo",
                  "Europe/Sarajevo",
                  "Asia/Choibalsan",
                  "America/Bahia",
                  "America/Merida",
                  "Asia/Barnaul",
                  "Pacific/Rarotonga",
                  "America/Indiana/Vincennes",
                  "Etc/GMT+0",
                  "America/North_Dakota/Center",
                  "Asia/Saigon",
                  "Indian/Comoro",
                  "Asia/Kuwait",
                  "Etc/GMT-10",
                  "America/Detroit",
                  "America/St_Barthelemy",
                  "America/St_Johns",
                  "Poland",
                  "Africa/Luanda",
                  "Atlantic/Reykjavik",
                  "America/Tortola",
                  "Europe/Zurich",
                  "America/Ciudad_Juarez",
                  "America/Maceio",
                  "Asia/Atyrau",
                  "Cuba",
                  "America/Hermosillo",
                  "America/Rosario",
                  "Atlantic/St_Helena",
                  "Etc/Universal",
                  "Europe/Minsk",
                  "Asia/Tehran",
                  "Africa/Banjul",
                  "Hongkong",
                  "Africa/Conakry",
                  "Asia/Ashkhabad",
                  "Asia/Nicosia",
                  "Asia/Hebron",
                  "Japan",
                  "Asia/Istanbul",
                  "Europe/San_Marino",
                  "US/Arizona",
                  "Asia/Seoul",
                  "Africa/El_Aaiun",
                  "America/Moncton",
                  "Europe/Bratislava",
                  "America/Bogota",
                  "Atlantic/Cape_Verde",
                  "Asia/Kuala_Lumpur",
                  "UTC",
                  "Etc/GMT+12",
                  "America/Guadeloupe",
                  "America/Port_of_Spain",
                  "America/Rainy_River",
                  "America/Halifax",
                  "Pacific/Nauru",
                  "Asia/Macao",
                  "America/Los_Angeles",
                  "Asia/Kathmandu",
                  "GB",
                  "Antarctica/Davis",
                  "Asia/Tbilisi",
                  "Europe/Malta",
                  "ROK",
                  "Africa/Tunis",
                  "America/Santo_Domingo",
                  "Asia/Calcutta",
                  "US/Hawaii",
                  "America/Chihuahua",
                  "Etc/GMT0",
                  "Etc/GMT+10",
                  "Pacific/Pago_Pago",
                  "Africa/Maseru",
                  "America/St_Vincent",
                  "Antarctica/Mawson",
                  "Etc/GMT+1",
                  "America/Toronto",
                  "Asia/Muscat",
                  "Australia/Perth",
                  "Pacific/Wallis",
                  "Asia/Aden",
                  "America/Vancouver",
                  "Africa/Mbabane",
                  "America/Glace_Bay",
                  "PST8PDT",
                  "Africa/Kampala",
                  "Asia/Kolkata",
                  "CET",
                  "Asia/Novokuznetsk",
                  "America/Indiana/Knox",
                  "America/Argentina/Buenos_Aires",
                  "America/Kentucky/Monticello",
                  "Etc/GMT+8",
                  "Asia/Chungking",
                  "Asia/Jakarta",
                  "America/Adak",
                  "Eire",
                  "America/Cordoba",
                  "Canada/Eastern",
                  "Antarctica/Rothera",
                  "Europe/Helsinki",
                  "America/Bahia_Banderas",
                  "Chile/Continental",
                  "America/Marigot",
                  "America/Creston",
                  "America/Cancun",
                  "America/Ojinaga",
                  "Etc/GMT-9",
                  "America/Nome",
                  "Pacific/Samoa",
                  "Africa/Bissau",
                  "America/Anchorage",
                  "Europe/Vilnius",
                  "Pacific/Majuro",
                  "Africa/Niamey",
                  "Australia/Queensland",
                  "America/Araguaina",
                  "Pacific/Guam",
                  "Canada/Central",
                  "America/Montevideo",
                  "America/Shiprock",
                  "Europe/Vaduz",
                  "Europe/Kirov",
                  "Australia/Lindeman",
                  "Asia/Ust-Nera",
                  "America/Argentina/Ushuaia",
                  "America/Yakutat",
                  "America/Knox_IN",
                  "Pacific/Tongatapu",
                  "Europe/Dublin",
                  "Africa/Freetown",
                  "GB-Eire",
                  "Australia/LHI",
                  "Etc/GMT-1",
                  "Europe/Athens",
                  "Pacific/Marquesas",
                  "America/Santa_Isabel",
                  "Asia/Colombo",
                  "America/Rankin_Inlet",
                  "America/Fort_Wayne",
                  "Australia/Lord_Howe",
                  "America/Mazatlan",
                  "US/Alaska",
                  "America/Matamoros",
                  "HST",
                  "Asia/Thimphu",
                  "Pacific/Niue",
                  "America/Juneau",
                  "America/North_Dakota/New_Salem",
                  "Canada/Pacific",
                  "America/Recife",
                  "Pacific/Port_Moresby",
                  "Europe/Andorra",
                  "Asia/Vladivostok",
                  "America/Argentina/Catamarca",
                  "Indian/Antananarivo",
                  "Pacific/Chuuk",
                  "Europe/Vatican",
                  "Mexico/General",
                  "Asia/Hong_Kong",
                  "Europe/Mariehamn",
                  "America/Panama",
                  "Asia/Dubai",
                  "America/Cayman",
                  "America/Manaus",
                  "Asia/Bangkok",
                  "America/Lower_Princes",
                  "Asia/Ashgabat",
                  "Atlantic/Faroe",
                  "America/Porto_Acre",
                  "Australia/North",
                  "America/Antigua",
                  "Europe/Luxembourg",
                  "Pacific/Bougainville",
                  "Pacific/Pohnpei",
                  "America/La_Paz",
                  "Australia/Canberra",
                  "Asia/Baghdad",
                  "America/Atikokan",
                  "Antarctica/Palmer",
                  "Europe/Amsterdam",
                  "Asia/Yerevan",
                  "GMT",
                  "Asia/Karachi",
                  "Universal",
                  "America/Curacao",
                  "Israel",
                  "America/Thunder_Bay",
                  "Africa/Dakar",
                  "Etc/Greenwich",
                  "America/Belize",
                  "America/Santarem",
                  "Asia/Tomsk",
                  "America/Kralendijk",
                  "America/Argentina/Tucuman",
                  "Pacific/Pitcairn",
                  "Asia/Shanghai",
                  "Etc/GMT+6",
                  "America/Chicago",
                  "Indian/Mahe",
                  "Pacific/Gambier",
                  "Asia/Dacca",
                  "Europe/Lisbon",
                  "US/East-Indiana",
                  "Europe/Bucharest",
                  "Africa/Algiers",
                  "Asia/Ujung_Pandang",
                  "Etc/GMT-12",
                  "Etc/GMT-13",
                  "America/Edmonton",
                  "America/Scoresbysund",
                  "Asia/Dushanbe",
                  "Asia/Gaza",
                  "Navajo",
                  "America/Boa_Vista",
                  "Asia/Anadyr",
                  "Australia/Brisbane",
                  "Atlantic/Jan_Mayen",
                  "Etc/GMT",
                  "Portugal",
                  "America/Kentucky/Louisville",
                  "America/Fort_Nelson",
                  "Atlantic/South_Georgia",
                  "America/Santiago",
                  "Etc/GMT-11",
                  "America/Puerto_Rico",
                  "Africa/Tripoli",
                  "Europe/Budapest",
                  "Asia/Qyzylorda",
                  "Australia/Eucla",
                  "Europe/Ljubljana",
                  "Asia/Irkutsk",
                  "Asia/Novosibirsk",
                  "Pacific/Chatham",
                  "EST5EDT",
                  "Africa/Lome",
                  "America/Argentina/ComodRivadavia",
                  "America/Lima",
                  "Australia/ACT",
                  "Pacific/Funafuti",
                  "America/Coral_Harbour",
                  "America/Buenos_Aires",
                  "Asia/Beirut",
                  "America/Argentina/La_Rioja",
                  "America/Thule",
                  "America/Belem",
                  "Asia/Jerusalem",
                  "Europe/Prague",
                  "Asia/Aqtobe",
                  "Europe/Belgrade",
                  "America/Fortaleza",
                  "Asia/Hovd",
                  "Kwajalein",
                  "Africa/Dar_es_Salaam",
                  "Europe/Riga",
                  "Etc/GMT-5",
                  "Asia/Oral",
                  "America/Caracas",
                  "Europe/Simferopol",
                  "Asia/Urumqi",
                  "Etc/Zulu",
                  "Asia/Tokyo",
                  "Europe/Kaliningrad",
                  "Pacific/Efate",
                  "America/Managua",
                  "Antarctica/Casey",
                  "America/North_Dakota/Beulah",
                  "America/Montreal",
                  "Europe/Madrid",
                  "Pacific/Fakaofo",
                  "Atlantic/Faeroe",
                  "Indian/Christmas",
                  "America/Argentina/Rio_Gallegos",
                  "America/Yellowknife",
                  "Asia/Yangon",
                  "Europe/Rome",
                  "Australia/Melbourne",
                  "America/Monterrey",
                  "Asia/Taipei",
                  "Africa/Lubumbashi",
                  "America/Indiana/Winamac",
                  "Asia/Manila",
                  "America/Montserrat",
                  "PRC",
                  "Indian/Cocos",
                  "Asia/Pontianak",
                  "Africa/Djibouti",
                  "MET",
                  "Europe/Brussels",
                  "Pacific/Noumea",
                  "Libya",
                  "Pacific/Honolulu",
                  "America/Grand_Turk",
                  "Antarctica/DumontDUrville",
                  "Asia/Yekaterinburg",
                  "GMT+0",
                  "US/Indiana-Starke",
                  "America/Guatemala",
                  "Asia/Famagusta",
                  "America/Tijuana",
                  "Etc/GMT+4",
                  "Mexico/BajaSur",
                  "Asia/Qatar",
                  "Europe/Busingen",
                  "Africa/Juba",
                  "Pacific/Palau",
                  "Australia/West",
                  "Pacific/Kosrae",
                  "Atlantic/Stanley",
                  "Asia/Kabul",
                  "Africa/Bujumbura",
                  "America/Nassau",
                  "America/Argentina/Jujuy",
                  "Etc/GMT+9",
                  "Factory",
                  "Africa/Asmera",
                  "Africa/Cairo",
                  "America/Argentina/Cordoba",
                  "Europe/Jersey",
                  "Africa/Casablanca",
                  "America/Indiana/Tell_City",
                  "America/Pangnirtung",
                  "Asia/Katmandu",
                  "Europe/Guernsey",
                  "America/Paramaribo",
                  "Etc/GMT+3",
                  "America/Boise",
                  "America/St_Kitts",
                  "America/Cambridge_Bay",
                  "Asia/Krasnoyarsk",
                  "Atlantic/Canary",
                  "America/Tegucigalpa",
                  "localtime",
                  "Africa/Abidjan",
                  "America/Danmarkshavn",
                  "Brazil/West",
                  "America/New_York",
                  "Asia/Jayapura",
                  "Africa/Khartoum",
                  "Africa/Blantyre",
                  "Africa/Timbuktu",
                  "America/Port-au-Prince",
                  "Brazil/DeNoronha",
                  "Asia/Macau",
                  "Asia/Aqtau",
                  "Canada/Newfoundland",
                  "Canada/Saskatchewan",
                  "US/Pacific",
                  "Europe/Paris",
                  "Pacific/Truk",
                  "Asia/Ulan_Bator",
                  "America/Metlakatla",
                  "WET",
                  "Arctic/Longyearbyen",
                  "Asia/Sakhalin",
                  "Asia/Almaty",
                  "Etc/GMT-14",
                  "Europe/Skopje",
                  "Etc/GMT+7",
                  "Pacific/Guadalcanal",
                  "America/Menominee",
                  "Asia/Srednekolymsk",
                  "MST",
                  "America/El_Salvador",
                  "Asia/Riyadh",
                  "Africa/Windhoek",
                  "America/Denver",
                  "Africa/Sao_Tome",
                  "Pacific/Saipan",
                  "Atlantic/Bermuda",
                  "Antarctica/Troll",
                  "Europe/Nicosia",
                  "Africa/Porto-Novo",
                  "Asia/Kuching",
                  "Egypt",
                  "Jamaica",
                  "America/Catamarca",
                  "Africa/Accra",
                  "America/Dawson",
                  "America/Whitehorse",
                  "Greenwich",
                  "Pacific/Kwajalein",
                  "America/Jamaica",
                  "Asia/Ulaanbaatar",
                  "Australia/Victoria",
                  "CST6CDT",
                  "Europe/Saratov",
                  "Asia/Omsk",
                  "Africa/Nairobi",
                  "America/Inuvik",
                  "Asia/Dhaka",
                  "America/Barbados",
                  "Asia/Khandyga",
                  "Pacific/Apia",
                  "Africa/Lusaka",
                  "Pacific/Wake",
                  "America/Grenada",
                  "Asia/Singapore",
                  "Asia/Magadan",
                  "Atlantic/Madeira",
                  "Iran"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "UTC"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "CurrentDate"
        },
        "dragging": false,
        "id": "CurrentDate-PNgnD",
        "measured": {
          "height": 249,
          "width": 320
        },
        "position": {
          "x": 314.34997886108704,
          "y": 1050.6514613653958
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": -245.20669133297042,
      "y": -638.9525796106309,
      "zoom": 1.0171851992384744
    }
  },
  "description": "Perform basic prompting.",
  "endpoint_name": null,
  "id": "1640c2e6-d445-4638-a95a-5ad52035e5c4",
  "is_component": false,
  "last_tested_version": "1.3.2",
  "name": "Basic Prompting",
  "tags": [
    "chatbots"
  ]
}